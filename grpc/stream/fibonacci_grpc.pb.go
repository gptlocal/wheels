// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: grpc/stream/fibonacci.proto

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Fibonacci_Calculate_FullMethodName = "/fibonacci.Fibonacci/Calculate"
)

// FibonacciClient is the client API for Fibonacci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibonacciClient interface {
	Calculate(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (Fibonacci_CalculateClient, error)
}

type fibonacciClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciClient(cc grpc.ClientConnInterface) FibonacciClient {
	return &fibonacciClient{cc}
}

func (c *fibonacciClient) Calculate(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (Fibonacci_CalculateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fibonacci_ServiceDesc.Streams[0], Fibonacci_Calculate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fibonacciCalculateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fibonacci_CalculateClient interface {
	Recv() (*FibonacciResponse, error)
	grpc.ClientStream
}

type fibonacciCalculateClient struct {
	grpc.ClientStream
}

func (x *fibonacciCalculateClient) Recv() (*FibonacciResponse, error) {
	m := new(FibonacciResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FibonacciServer is the server API for Fibonacci service.
// All implementations must embed UnimplementedFibonacciServer
// for forward compatibility
type FibonacciServer interface {
	Calculate(*FibonacciRequest, Fibonacci_CalculateServer) error
	mustEmbedUnimplementedFibonacciServer()
}

// UnimplementedFibonacciServer must be embedded to have forward compatible implementations.
type UnimplementedFibonacciServer struct {
}

func (UnimplementedFibonacciServer) Calculate(*FibonacciRequest, Fibonacci_CalculateServer) error {
	return status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedFibonacciServer) mustEmbedUnimplementedFibonacciServer() {}

// UnsafeFibonacciServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibonacciServer will
// result in compilation errors.
type UnsafeFibonacciServer interface {
	mustEmbedUnimplementedFibonacciServer()
}

func RegisterFibonacciServer(s grpc.ServiceRegistrar, srv FibonacciServer) {
	s.RegisterService(&Fibonacci_ServiceDesc, srv)
}

func _Fibonacci_Calculate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FibonacciRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FibonacciServer).Calculate(m, &fibonacciCalculateServer{stream})
}

type Fibonacci_CalculateServer interface {
	Send(*FibonacciResponse) error
	grpc.ServerStream
}

type fibonacciCalculateServer struct {
	grpc.ServerStream
}

func (x *fibonacciCalculateServer) Send(m *FibonacciResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Fibonacci_ServiceDesc is the grpc.ServiceDesc for Fibonacci service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fibonacci_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fibonacci.Fibonacci",
	HandlerType: (*FibonacciServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Calculate",
			Handler:       _Fibonacci_Calculate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/stream/fibonacci.proto",
}
